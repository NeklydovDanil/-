/*
Программа демонстрирует действие Шифра RSA.
Для тестирования необходимо ввести текст на латинице (тестовый пример - Hello World)
Далее проходит Шифрование и Дешифрование текста.
Запуск файла происходит путём копирования текста и запуск в любой удобной среде разработки(язык с++), также возможна проверка в оналйн компиляторе, но при этом варианте могут быть неточности из-за некорректого чтения и отображения текста через консоль.
*/

#include <iostream>
#include <vector>
#include <cmath>
#include <string>
#include <algorithm>

using namespace std;

class RSACipher {
private:
    int publicKey;
    int privateKey;
    int n;

    // Функция для проверки простоты числа
    bool isPrime(int num) {
        if (num <= 1) return false;
        for (int i = 2; i <= sqrt(num); ++i) {
            if (num % i == 0) return false;
        }
        return true;
    }

    // Генерация публичного и приватного ключей
    void generateKeys() {
        int p = 97; // Пример первого простого числа
        int q = 89; // Пример второго простого числа
        n = p * q;

        int totient = (p - 1) * (q - 1);

        // Выбор открытого ключа 'e'
        for (int i = 2; i < totient; ++i) {
            if (isPrime(i) && gcd(i, totient) == 1) {
                publicKey = i;
                break;
            }
        }

        // Вычисление закрытого ключа 'd'
        for (int i = 2; i < totient; ++i) {
            if ((publicKey * i) % totient == 1) {
                privateKey = i;
                break;
            }
        }
    }

    // Поиск наибольшего общего делителя
    int gcd(int a, int b) {
        if (b == 0) return a;
        return gcd(b, a % b);
    }

public:
    RSACipher() {
        generateKeys();
    }

    // Шифрование сообщения
    vector<int> encrypt(const string &message) {
        vector<int> encrypted;
        for (char c : message) {
            int m = static_cast<int>(c);
            int cipher = 1;
            for (int i = 0; i < publicKey; ++i) {
                cipher = (cipher * m) % n;
            }
            encrypted.push_back(cipher);
        }
        return encrypted;
    }

    // Дешифрование сообщения
    string decrypt(const vector<int> &encryptedMessage) {
        string decrypted;
        for (int cipher : encryptedMessage) {
            int message = 1;
            for (int i = 0; i < privateKey; ++i) {
                message = (message * cipher) % n;
            }
            decrypted += static_cast<char>(message);
        }
        return decrypted;
    }
};

int main() {
    RSACipher rsaCipher;

    string message;
    cout << "Введите текст: ";
    getline(cin, message);

    // Шифрование
    vector<int> encryptedMessage = rsaCipher.encrypt(message);
    cout << "Зашифрованное сообщение: ";
    for (int cipher : encryptedMessage) {
        cout << cipher;
    }
    cout << endl;

    // Дешифрование
    string decryptedMessage = rsaCipher.decrypt(encryptedMessage);
    cout << "Расшифрованное сообщение: " << decryptedMessage << endl;

    return 0;
}

