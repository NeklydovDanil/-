/*
Программа демонстрирует действие Потокового Шифра.
Для тестирования необходимо ввести текст на латинице (тестовый пример - Hello World)
Далее проходит Шифрование и Дешифрование
Запуск файла происходит путём копирования текста и запуск в любой удобной среде разработки(язык с++), также возможна проверка в оналйн компиляторе, но при этом варианте могут быть неточности из-за некорректого чтения и отображения текста через консоль.
*/

#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <numeric> // Для использования iota

using namespace std;

class StreamCipher {
private:
    // Подстановка (S-BOX) для замены байтов
    vector<uint8_t> substitute(const vector<uint8_t>& block) {
        vector<uint8_t> sBox = {
            10, 4, 14, 2, 13, 6, 1, 15, 8, 9, 0, 11, 7, 12, 3, 5,
            11, 2, 12, 4, 14, 13, 8, 15, 5, 3, 1, 6, 10, 7, 9, 0,
            15, 9, 1, 12, 5, 3, 10, 14, 2, 6, 8, 4, 7, 0, 11, 13,
            13, 7, 11, 1, 0, 10, 6, 15, 9, 4, 5, 12, 14, 2, 3, 8,
            6, 12, 9, 3, 15, 7, 13, 5, 1, 10, 8, 14, 0, 4, 11, 2,
            4, 9, 8, 0, 7, 1, 3, 13, 2, 6, 10, 5, 15, 12, 11, 14,
            13, 14, 4, 1, 3, 15, 5, 9, 8, 10, 7, 6, 2, 11, 0, 12,
            1, 12, 13, 0, 5, 7, 14, 4, 9, 3, 10, 2, 11, 6, 15, 8
        };

        vector<uint8_t> result(block.size());
        for (size_t i = 0; i < block.size(); ++i) {
            result[i] = sBox[block[i] & 0x0F];
        }
        return result;
    }

    // Операция циклического сдвига влево
    vector<uint8_t> rol(const vector<uint8_t>& block, int shift) {
        vector<uint8_t> result(block.size());
        for (size_t i = 0; i < block.size(); ++i) {
            result[i] = (block[i] << shift) | (block[i] >> (8 - shift));
        }
        return result;
    }

    // Генерация потока ключа с использованием вращения влево
public:
    vector<uint8_t> generateKeyStream(const vector<uint8_t>& key, int length) {
        vector<uint8_t> keyStream(length);
        int counter = 0;
        while (keyStream.size() < length) {
            vector<uint8_t> counterBytes(1, static_cast<uint8_t>(counter));

            // Применяем вращение влево к блоку счетчика перед подстановкой
            counterBytes = rol(counterBytes, 4); // Пример вращения на 4 бита

            vector<uint8_t> subBytes = substitute(counterBytes); // Шифрование счетчика
            keyStream = xorBlocks(keyStream, subBytes); // Применяем XOR
            counter++;
        }
        return keyStream;
    }

    // Функция для XOR двух блоков
    vector<uint8_t> xorBlocks(const vector<uint8_t>& block1, const vector<uint8_t>& block2) {
        vector<uint8_t> result(min(block1.size(), block2.size()));
        for (size_t i = 0; i < result.size(); ++i) {
            result[i] = block1[i] ^ block2[i];
        }
        return result;
    }

    // Шифрование/дешифрование данных
    vector<uint8_t> processData(const vector<uint8_t>& data, const vector<uint8_t>& key) {
        vector<uint8_t> keyStream = generateKeyStream(key, data.size());
        return xorBlocks(data, keyStream);
    }
};

int main() {
    StreamCipher cipher;
    string messageStr;
    string keyStr = "SECRET";

    cout << "Введите текст: ";
    getline(cin, messageStr);
    //cout << messageStr

    // Преобразуем строки в массивы байт
    vector<uint8_t> message(messageStr.begin(), messageStr.end());
    vector<uint8_t> key(keyStr.begin(), keyStr.end());

    // Зашифрование
    vector<uint8_t> encrypted = cipher.processData(message, key);
    cout << "Зашифрованное сообщение: ";
    for (uint8_t byte : encrypted) {
        cout << static_cast<int>(byte) << " ";
    }
    cout << endl;

    // Дешифрование
    vector<uint8_t> decrypted = cipher.processData(encrypted, key);
    cout << "Расшифрованное сообщение: ";
    for (uint8_t byte : decrypted) {
        cout << byte;
    }
    cout << endl;

    return 0;
}
