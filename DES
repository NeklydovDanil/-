/*
Программа демонстрирует действие Шифра DES.
Для тестирования необходимо ввести текст на латинице (тестовый пример - Hello World)
Далее проходит Шифрование и Дешифрование текста.
Запуск файла происходит путём копирования текста и запуск в любой удобной среде разработки(язык с++), также возможна проверка в оналйн компиляторе, но при этом варианте могут быть неточности из-за некорректого чтения и отображения текста через консоль.
*/

#include <iostream>
#include <vector>
#include <string>

using namespace std;

// Пример простого ключа для DES
const vector<int> kluch = {'D', 'E', 'S', 'K', 'E', 'Y', 1, 2};

// Функция для шифрования блока текста
string shifrovatBlok(const string &blok, const vector<int> &kluch) {
    string shifrovanBlok = blok;

    for (size_t i = 0; i < blok.size(); ++i) {
        shifrovanBlok[i] = static_cast<char>((blok[i] + kluch[i % kluch.size()]) % 256);
    }
    
    return shifrovanBlok;
}

// Функция для дешифрования блока текста
string deshifrovatBlok(const string &blok, const vector<int> &kluch) {
    string deshifrovanBlok = blok;

    for (size_t i = 0; i < blok.size(); ++i) {
        deshifrovanBlok[i] = static_cast<char>((blok[i] - kluch[i % kluch.size()] + 256) % 256);
    }
    
    return deshifrovanBlok;
}

// Разделение текста на блоки по 8 символов
vector<string> razdelitNaBloki(const string &tekst, size_t razmerBloka) {
    vector<string> bloki;
    
    for (size_t i = 0; i < tekst.size(); i += razmerBloka) {
        bloki.push_back(tekst.substr(i, razmerBloka));
    }
    
    return bloki;
}

// Добавление паддинга до кратности 8
string dobavitPadding(const string &soobshenie, size_t razmerBloka) {
    size_t razmerPaddinga = razmerBloka - (soobshenie.size() % razmerBloka);
    return soobshenie + string(razmerPaddinga, static_cast<char>(razmerPaddinga));
}

// Удаление паддинга
string ubratPadding(const string &soobshenie) {
    char razmerPaddinga = soobshenie.back();
    return soobshenie.substr(0, soobshenie.size() - razmerPaddinga);
}

int main() {
    const size_t razmerBloka = 8;

    string otkrytyTekst;
    cout << "Введите текст: ";
    getline(cin, otkrytyTekst);

    // cout << otkrytyTekst << endl;

    // Добавляем паддинг
    string sPaddingom = dobavitPadding(otkrytyTekst, razmerBloka);

    // cout << sPaddingom << endl;

    // Разделяем текст на блоки
    vector<string> bloki = razdelitNaBloki(sPaddingom, razmerBloka);

    // Шифрование
    vector<string> shifrovannyeBloki;
    for (const string &blok : bloki) {
        shifrovannyeBloki.push_back(shifrovatBlok(blok, kluch));
    }

    // Объединение зашифрованных блоков
    string shifrovannyTekst;
    for (const string &blok : shifrovannyeBloki) {
        shifrovannyTekst += blok;
    }

    // Вывод зашифрованного текста
    cout << "Зашифрованный текст: ";
    for (char c : shifrovannyTekst) {
        printf("%02X ", static_cast<unsigned char>(c));
    }
    cout << endl;

    // cout << shifrovannyTekst << endl;

    // Дешифрование
    vector<string> deshifrovannyeBloki;
    for (const string &blok : shifrovannyeBloki) {
        deshifrovannyeBloki.push_back(deshifrovatBlok(blok, kluch));
    }

    // Объединение расшифрованных блоков
    string deshifrovannyTekst;
    for (const string &blok : deshifrovannyeBloki) {
        deshifrovannyTekst += blok;
    }

    // Удаление паддинга
    deshifrovannyTekst = ubratPadding(deshifrovannyTekst);

    // Вывод расшифрованного текста
    cout << "Расшифрованный текст: " << deshifrovannyTekst << endl;

    return 0;
}
