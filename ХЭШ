/*
Программа демонстрирует действие Хэширование.
Для тестирования необходимо ввести текст на латинице (тестовый пример - Hello World)
Далее проходит Шифрование текста.
Запуск файла происходит путём копирования текста и запуск в любой удобной среде разработки(язык с++), также возможна проверка в оналйн компиляторе, но при этом варианте могут быть неточности из-за некорректого чтения и отображения текста через консоль.
*/

#include <iostream>
#include <vector>
#include <cstdint>
#include <string>

using namespace std;

class HashCipher {
private:
    static const size_t BLOCK_SIZE = 8; // Размер блока (8 байт)
    static vector<uint8_t> pad(const vector<uint8_t>& data) {
        int paddingLen = BLOCK_SIZE - (data.size() % BLOCK_SIZE);
        vector<uint8_t> paddedData(data.size() + paddingLen, paddingLen);
        copy(data.begin(), data.end(), paddedData.begin());
        return paddedData;
    }

    // Функция хэширования с использованием ГОСТ
    static vector<uint8_t> hashMessageHash(const vector<uint8_t>& message, const vector<uint8_t>& key) {
        vector<uint8_t> paddedMessage = pad(message); 
        vector<vector<uint8_t>> blocks(paddedMessage.size() / BLOCK_SIZE, vector<uint8_t>(BLOCK_SIZE)); // Разбиение сообщения на блоки

        // Разбиение на блоки
        for (size_t i = 0; i < paddedMessage.size(); i += BLOCK_SIZE) {
            copy(paddedMessage.begin() + i, paddedMessage.begin() + i + BLOCK_SIZE, blocks[i / BLOCK_SIZE].begin());
        }

        vector<uint8_t> hPrev(BLOCK_SIZE, 0); // Начальный хеш, все байты равны 0

        // Алгоритм хэширования с измененной формулой
        for (auto& block : blocks) {
            vector<uint8_t> encrypted = hashEncryptBlock(hPrev, key); 
            vector<uint8_t> intermediate = complexXor(encrypted, block); 
            hPrev = intermediate; // Обновляем предыдущий хеш
        }

        return hPrev; // Возвращаем итоговый хеш
    }

    // Операция XOR 
    static vector<uint8_t> complexXor(const vector<uint8_t>& encrypted, const vector<uint8_t>& block) {
        vector<uint8_t> result(BLOCK_SIZE);

        // Применяем побитовый сдвиг и маскировку
        for (size_t i = 0; i < encrypted.size(); i++) {
            result[i] = (encrypted[i] << 3) & 0xFF; // Сдвиг влево на 3 бита
            result[i] ^= block[i]; 
            result[i] &= 0x7F; 
        }

        return result;
    }

    // Хэширование блока с использованием ГОСТ
    static vector<uint8_t> hashEncryptBlock(const vector<uint8_t>& block, const vector<uint8_t>& key) {
        if (key.size() != 32) {
            throw invalid_argument("Ключ должен быть длиной 32 байта.");
        }

        uint32_t left = byteArrayToInt(block, 0);
        uint32_t right = byteArrayToInt(block, 4);
        vector<uint32_t> keyParts(8);

        // Разбиение ключа на 8 частей по 4 байта
        for (size_t i = 0; i < 8; i++) {
            keyParts[i] = byteArrayToInt(key, i * 4);
        }

        for (size_t i = 0; i < 24; i++) {
            uint32_t temp = (left + keyParts[i % 8]) & 0xFFFFFFFF;
            right = right ^ substitute(temp);
            left = right;
        }

        vector<uint8_t> result(BLOCK_SIZE);
        intToByteArray(left, result, 0);
        intToByteArray(right, result, 4);
        return result;
    }

    // Преобразование массива байтов в целое число (4 байта)
    static uint32_t byteArrayToInt(const vector<uint8_t>& byteArray, size_t offset) {
        return (byteArray[offset] & 0xFF) | ((byteArray[offset + 1] & 0xFF) << 8) |
               ((byteArray[offset + 2] & 0xFF) << 16) | ((byteArray[offset + 3] & 0xFF) << 24);
    }

    // Преобразование целого числа в массив байтов
    static void intToByteArray(uint32_t value, vector<uint8_t>& byteArray, size_t offset) {
        byteArray[offset] = static_cast<uint8_t>(value & 0xFF);
        byteArray[offset + 1] = static_cast<uint8_t>((value >> 8) & 0xFF);
        byteArray[offset + 2] = static_cast<uint8_t>((value >> 16) & 0xFF);
        byteArray[offset + 3] = static_cast<uint8_t>((value >> 24) & 0xFF);
    }

    // Функция замещения для ГОСТ
    static uint32_t substitute(uint32_t value) {
        return value;
    }

public:
    HashCipher() = default;
    ~HashCipher() = default;

    // Публичный интерфейс для хэширования сообщения
    vector<uint8_t> hashMessage(const vector<uint8_t>& message, const vector<uint8_t>& key) {
        return hashMessageHash(message, key);
    }
};

int main() {
    vector<uint8_t> key = {
    'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H',
    '1', '2', '3', '4', '5', '6', '7', '8',
    'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',
    '9', '0', 'A', 'B', 'C', 'D', 'E', 'F'
};
    //vector<uint8_t> message = {'h', 'e', 'l', 'l', 'o'};
    
    cout << "Введите сообщение: ";
    string messageGet;
    getline(cin, messageGet);
    vector<unsigned char> message(messageGet.begin(), messageGet.end());

    HashCipher hc;
    vector<uint8_t> hash = hc.hashMessage(message, key);

    cout << "Зашифрованное сообщение: ";
    for (auto byte : hash) {
        cout << hex << static_cast<int>(byte);
    }
    cout << endl;

    return 0;
}
